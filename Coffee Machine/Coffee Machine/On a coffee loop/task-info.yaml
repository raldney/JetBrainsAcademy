type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    ### Coffe Machine

    # Figure out how much of each ingredient the machine will need.
    # Note that one cup of coffee made on this coffee machine contains
    # 200 ml of water, 50 ml of milk, and 15 g of coffee beans
    import math


    class CoffeeMachine:
        COFFEE_RECIPE = {'1': {
            'water': 250,
            'coffee_beans': 16,
            'disposable_cups': 1,
            'price': 4
        }, '2': {
            'milk': 75,
            'water': 350,
            'coffee_beans': 20,
            'disposable_cups': 1,
            'price': 7
        }, '3': {
            'milk': 100,
            'water': 200,
            'coffee_beans': 12,
            'disposable_cups': 1,
            'price': 6
        }}

        def __init__(self):
            self._disposable_cups = 9
            self._money = 550
            self._water = 400
            self._milk = 540
            self._coffee_beans = 120
            self.print_supplies()

        def take_coffee(self, quantity):
            pass

        def do_withdraw(self):
            print('I gave you ${}'.format(self._money))
            self._money = 0
            self.print_supplies()

        def fill_machine(self, ingredients):
            self._disposable_cups += ingredients['disposable_cups']
            self._water += ingredients['water']
            self._milk += ingredients['milk']
            self._coffee_beans += ingredients['coffee_beans']
            self.print_supplies()

        def prepare_coffee(self, coffee_type):
            if coffee_type not in self.COFFEE_RECIPE:
                print('Invalid Option!')
                return False

            for ingredient in self.COFFEE_RECIPE[coffee_type]:
                if ingredient == 'price':
                    break
                if not self.verify_ingredients(ingredient, coffee_type):
                    return None
            for ingredient in self.COFFEE_RECIPE[coffee_type]:
                if ingredient != 'price':
                    ingredient_quantity = self.__getattribute__('_' + ingredient) - self.COFFEE_RECIPE[coffee_type][
                        ingredient]
                    self.__setattr__('_' + ingredient, ingredient_quantity)

            self._money += self.COFFEE_RECIPE[coffee_type]['price']
            self.print_supplies()
            return True

        def verify_ingredients(self, ingredient_type, coffee_type):
            print(ingredient_type in self.COFFEE_RECIPE[coffee_type], ingredient_type)
            if ingredient_type in self.COFFEE_RECIPE[coffee_type]:
                if self.__getattribute__('_' + ingredient_type) / self.COFFEE_RECIPE[coffee_type][ingredient_type] < 1:
                    return False
            return True

        def print_supplies(self):
            print("The coffee machine has:\n"
                  "{} of water\n"
                  "{} of milk\n"
                  "{} of coffee beans\n"
                  "{} of disposable cups\n"
                  "{} of money\n"
                  .format(self._water, self._milk, self._coffee_beans, self._disposable_cups, self._money))


    coffee_machine = CoffeeMachine()

    option = input('Write action (buy, fill, take):')

    if option == 'fill':
        qtd_water = int(input("Write how many ml of water do you want to add:"))
        qtd_milk = int(input("Write how many ml of milk do you want to add:"))
        qtd_coffee = int(input("Write how many grams of coffee beans do you want to add:"))
        qtd_cups = int(input("Write how many disposable cups do you want to add:"))
        new_ingredients = {'water': qtd_water, 'milk': qtd_milk, 'coffee_beans': qtd_coffee, 'disposable_cups': qtd_cups}
        coffee_machine.fill_machine(new_ingredients)
    elif option == 'take':
        coffee_machine.do_withdraw()
        pass
    elif option == 'buy':
        coffee_type = input('What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:')
        coffee_machine.prepare_coffee(coffee_type)

    else:
        print('Invalid Option!')
    #
    # if qtd_cups_produced == qtd_cups:
    #     print("Yes, I can make that amount of coffee")
    # elif qtd_cups_produced < qtd_cups:
    #     print("No, I can make only {} cups of coffee".format(qtd_cups_produced))
    # else:
    #     print("Yes, I can make that amount of coffee (and even {} more than that)".format(qtd_cups_produced - qtd_cups))

    # if qtd_cups < 0:
    # raise ValueError("Please input a valid quantity of cups")
    #
    # cup_coffee = {"qtd_cups": qtd_cups,
    #               "milk": milk * qtd_cups,
    #               "coffee_beans": coffee_beans * qtd_cups,
    #               "water":  water * qtd_cups}


    #
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/370/implement
status: Solved
record: 5
